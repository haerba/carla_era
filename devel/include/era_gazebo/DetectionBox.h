// Generated by gencpp from file era_gazebo/DetectionBox.msg
// DO NOT EDIT!


#ifndef ERA_GAZEBO_MESSAGE_DETECTIONBOX_H
#define ERA_GAZEBO_MESSAGE_DETECTIONBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace era_gazebo
{
template <class ContainerAllocator>
struct DetectionBox_
{
  typedef DetectionBox_<ContainerAllocator> Type;

  DetectionBox_()
    : header()
    , type()
    , id(0)
    , left(0)
    , right(0)
    , top(0)
    , bottom(0)
    , mask_1d()  {
    }
  DetectionBox_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(_alloc)
    , id(0)
    , left(0)
    , right(0)
    , top(0)
    , bottom(0)
    , mask_1d(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef uint16_t _id_type;
  _id_type id;

   typedef uint32_t _left_type;
  _left_type left;

   typedef uint32_t _right_type;
  _right_type right;

   typedef uint32_t _top_type;
  _top_type top;

   typedef uint32_t _bottom_type;
  _bottom_type bottom;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _mask_1d_type;
  _mask_1d_type mask_1d;





  typedef boost::shared_ptr< ::era_gazebo::DetectionBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::era_gazebo::DetectionBox_<ContainerAllocator> const> ConstPtr;

}; // struct DetectionBox_

typedef ::era_gazebo::DetectionBox_<std::allocator<void> > DetectionBox;

typedef boost::shared_ptr< ::era_gazebo::DetectionBox > DetectionBoxPtr;
typedef boost::shared_ptr< ::era_gazebo::DetectionBox const> DetectionBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::era_gazebo::DetectionBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::era_gazebo::DetectionBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::era_gazebo::DetectionBox_<ContainerAllocator1> & lhs, const ::era_gazebo::DetectionBox_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.id == rhs.id &&
    lhs.left == rhs.left &&
    lhs.right == rhs.right &&
    lhs.top == rhs.top &&
    lhs.bottom == rhs.bottom &&
    lhs.mask_1d == rhs.mask_1d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::era_gazebo::DetectionBox_<ContainerAllocator1> & lhs, const ::era_gazebo::DetectionBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace era_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::era_gazebo::DetectionBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::era_gazebo::DetectionBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::era_gazebo::DetectionBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::era_gazebo::DetectionBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::era_gazebo::DetectionBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::era_gazebo::DetectionBox_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::era_gazebo::DetectionBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d552de66f95ce47b60d4c14ec821db2b";
  }

  static const char* value(const ::era_gazebo::DetectionBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd552de66f95ce47bULL;
  static const uint64_t static_value2 = 0x60d4c14ec821db2bULL;
};

template<class ContainerAllocator>
struct DataType< ::era_gazebo::DetectionBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "era_gazebo/DetectionBox";
  }

  static const char* value(const ::era_gazebo::DetectionBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::era_gazebo::DetectionBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"string type\n"
"uint16 id\n"
"uint32 left\n"
"uint32 right\n"
"uint32 top\n"
"uint32 bottom\n"
"float32[] mask_1d\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::era_gazebo::DetectionBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::era_gazebo::DetectionBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.id);
      stream.next(m.left);
      stream.next(m.right);
      stream.next(m.top);
      stream.next(m.bottom);
      stream.next(m.mask_1d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectionBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::era_gazebo::DetectionBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::era_gazebo::DetectionBox_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "left: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.right);
    s << indent << "top: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.top);
    s << indent << "bottom: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.bottom);
    s << indent << "mask_1d[]" << std::endl;
    for (size_t i = 0; i < v.mask_1d.size(); ++i)
    {
      s << indent << "  mask_1d[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mask_1d[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERA_GAZEBO_MESSAGE_DETECTIONBOX_H
